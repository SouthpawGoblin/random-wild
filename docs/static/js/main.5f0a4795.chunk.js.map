{"version":3,"sources":["components/GridCanvas.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/styles/App.module.scss"],"names":["GridCanvas","React","forwardRef","props","ref","width","height","App","canvasRef","useRef","useState","window","innerWidth","innerHeight","canvasSize","setCanvasSize","addEventListener","_","debounce","useEffect","current","can","ctx","getContext","gridSize","x","y","dragging","keyMaps","ev","deltaY","movementX","movementY","document","key","rendering","render","clearRect","fillStyle","fillRect","strokeStyle","i","beginPath","moveTo","lineTo","stroke","j","requestAnimationFrame","className","styles","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"gNAceA,EANqBC,IAAMC,YAAW,SAACC,EAAcC,GAClE,OACE,4BAAQC,MAAOF,EAAME,MAAOC,OAAQH,EAAMG,OAAQF,IAAKA,O,gBCqG5CG,EA1GO,WACpB,IAAMC,EAAYC,iBAA0B,MADlB,EAEUC,mBAAS,CAC3CL,MAAOM,OAAOC,WACdN,OAAQK,OAAOE,cAJS,mBAEnBC,EAFmB,KAEPC,EAFO,KAmG1B,OA5FAJ,OAAOK,iBAAiB,SAAUC,IAAEC,UAAS,WAC3CH,EAAc,CACZV,MAAOM,OAAOC,WACdN,OAAQK,OAAOE,gBAEhB,MAEHM,qBAAU,WACR,GAAKX,EAAUY,QAAf,CACA,IAAMC,EAAMb,EAAUY,QAChBE,EAAMD,EAAIE,WAAW,MACvBC,EAAW,GACXC,EAAI,EACJC,EAAI,EACJC,GAAW,EACXC,EAAqC,GAEzCP,EAAIL,iBAAiB,SAAS,SAASa,GAErCL,GADAA,GAAYK,EAAGC,OAAS,GAAK,EAAI,GACX,EAAI,EAAIN,KAEhCH,EAAIL,iBAAiB,aAAa,WAChCW,GAAW,KAEbN,EAAIL,iBAAiB,WAAW,WAC9BW,GAAW,KAEbN,EAAIL,iBAAiB,cAAc,WACjCW,GAAW,KAEbN,EAAIL,iBAAiB,aAAa,SAASa,GACrCF,IACFF,GAAKI,EAAGE,UACRL,GAAKG,EAAGG,cAGZC,SAASjB,iBAAiB,WAAW,SAASa,GAC5CD,EAAQC,EAAGK,KAAO,KAEpBD,SAASjB,iBAAiB,SAAS,SAASa,UACnCD,EAAQC,EAAGK,QAGpB,IAAIC,GAAY,EA4ChB,OA1CA,SAASC,IACP,GAAKd,GAAQa,EAAb,CAEIP,EAAO,IACTH,GAAK,GAEHG,EAAO,IACTH,GAAK,GAEHG,EAAO,IACTF,GAAK,GAEHE,EAAO,IACTF,GAAK,GAGPJ,EAAIe,UAAU,EAAG,EAAGhB,EAAIhB,MAAOgB,EAAIf,QACnCgB,EAAIgB,UAAY,UAChBhB,EAAIiB,SAAS,EAAG,EAAGlB,EAAIhB,MAAOgB,EAAIf,QAElCgB,EAAIkB,YAAc,OAClB,IAAK,IAAIC,EAAI,EAAGA,EAAIpB,EAAIhB,MAAQmB,EAAW,EAAGiB,IAC5CnB,EAAIoB,YACJpB,EAAIqB,OAAOF,EAAIjB,EAAWC,EAAID,EAAWA,GAAWA,GACpDF,EAAIsB,OAAOH,EAAIjB,EAAWC,EAAID,EAAWA,EAAUH,EAAIf,OAASkB,GAChEF,EAAIuB,SAEN,IAAK,IAAIC,EAAI,EAAGA,EAAIzB,EAAIf,OAASkB,EAAW,EAAGsB,IAC7CxB,EAAIoB,YACJpB,EAAIqB,QAAQnB,EAAUsB,EAAItB,EAAWE,EAAIF,EAAWA,GACpDF,EAAIsB,OAAOvB,EAAIhB,MAAQmB,EAAUsB,EAAItB,EAAWE,EAAIF,EAAWA,GAC/DF,EAAIuB,SAGNvB,EAAIgB,UAAY,MAChBhB,EAAIiB,SAAS,IAAMd,EAAG,IAAMC,EAAG,GAAI,IAExBqB,sBAAsBX,IAGnCA,GAEO,WACLD,GAAY,MAEb,IAGD,yBAAKa,UAAWC,IAAM,KACpB,kBAAC,EAAD,CAAY5C,MAAOS,EAAWT,MAAOC,OAAQQ,EAAWR,OAAQF,IAAKI,MC9FvD0C,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASC,MACvB,2DCZNC,IAASlB,OAAO,kBAAC,EAAD,MAASH,SAASsB,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBE1InBC,EAAOC,QAAU,CAAC,IAAM,mB","file":"static/js/main.5f0a4795.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n  width: number\n  height: number\n  ref: React.Ref<HTMLCanvasElement>\n}\n\nconst GridCanvas: React.FC<Props> = React.forwardRef((props: Props, ref: React.Ref<HTMLCanvasElement>) => {\n  return (\n    <canvas width={props.width} height={props.height} ref={ref} />\n  )\n})\n\nexport default GridCanvas\n","import React, { useState, useRef, useEffect } from 'react';\nimport _ from 'lodash'\nimport GridCanvas from './components/GridCanvas'\nimport styles from './assets/styles/App.module.scss';\n\nconst App: React.FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const [canvasSize, setCanvasSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  })\n\n  window.addEventListener('resize', _.debounce(() => {\n    setCanvasSize({\n      width: window.innerWidth,\n      height: window.innerHeight\n    })\n  }, 100))\n\n  useEffect(() => {\n    if (!canvasRef.current) return\n    const can = canvasRef.current\n    const ctx = can.getContext('2d')\n    let gridSize = 50\n    let x = 0\n    let y = 0\n    let dragging = false\n    let keyMaps: { [key: string]: number } = { }\n  \n    can.addEventListener('wheel', function(ev) {\n      gridSize += ev.deltaY > 0 ? -2 : 2\n      gridSize = gridSize < 4 ? 4 : gridSize\n    })\n    can.addEventListener('mousedown', function() {\n      dragging = true\n    })\n    can.addEventListener('mouseup', function() {\n      dragging = false\n    })\n    can.addEventListener('mouseleave', function() {\n      dragging = false\n    })\n    can.addEventListener('mousemove', function(ev) {\n      if (dragging) {\n        x += ev.movementX\n        y += ev.movementY\n      }\n    })\n    document.addEventListener('keydown', function(ev) {\n      keyMaps[ev.key] = 1\n    })\n    document.addEventListener('keyup', function(ev) {\n      delete keyMaps[ev.key]\n    })\n  \n    let rendering = true\n\n    function render() {\n      if (!ctx || !rendering) return\n      \n      if (keyMaps['a']) {\n        x -= 2\n      }\n      if (keyMaps['d']) {\n        x += 2\n      }\n      if (keyMaps['w']) {\n        y -= 2\n      }\n      if (keyMaps['s']) {\n        y += 2\n      }\n  \n      ctx.clearRect(0, 0, can.width, can.height)\n      ctx.fillStyle = '#000000'\n      ctx.fillRect(0, 0, can.width, can.height)\n  \n      ctx.strokeStyle = '#fff'\n      for (let i = 0; i < can.width / gridSize + 2; i++) {\n        ctx.beginPath()\n        ctx.moveTo(i * gridSize + x % gridSize - gridSize, -gridSize)\n        ctx.lineTo(i * gridSize + x % gridSize - gridSize, can.height + gridSize)\n        ctx.stroke()\n      }\n      for (let j = 0; j < can.height / gridSize + 2; j++) {\n        ctx.beginPath()\n        ctx.moveTo(-gridSize, j * gridSize + y % gridSize - gridSize)\n        ctx.lineTo(can.width + gridSize, j * gridSize + y % gridSize - gridSize)\n        ctx.stroke()\n      }\n  \n      ctx.fillStyle = 'red'\n      ctx.fillRect(125 + x, 125 + y, 50, 50)\n  \n      const id = requestAnimationFrame(render)\n    }\n    \n    render()\n\n    return () => {\n      rendering = false\n    }\n  }, [])\n\n  return (\n    <div className={styles['App']}>\n      <GridCanvas width={canvasSize.width} height={canvasSize.height} ref={canvasRef} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__BWNaW\"};"],"sourceRoot":""}