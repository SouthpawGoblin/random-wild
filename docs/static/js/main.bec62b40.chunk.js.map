{"version":3,"sources":["components/GridCanvas.tsx","assets/engine/Scene.ts","assets/engine/Tile.ts","assets/engine/Renderer.ts","assets/engine/Controller.ts","App.tsx","serviceWorker.ts","index.tsx","assets/styles/App.module.scss"],"names":["GridCanvas","React","forwardRef","props","ref","width","height","Scene","tiles","this","tile","key","position","x","y","z","Tile","pos","color","Renderer","canvas","scene","pixelRatio","ctx","showGrid","_zoom","_translation","_rotation","_pixelRatio","_totalTranslation","_tileSize","context","getContext","Error","clear","translate","rotate","renderGrid","Object","values","getTiles","forEach","fillStyle","rect","getTileRenderRect","fillRect","w","h","setTransform","halfDiagonal","Math","sqrt","pow","startX","endX","startY","endY","strokeStyle","strokeLine","i","yDown","yUp","xRight","xLeft","x1","y1","x2","y2","beginPath","moveTo","lineTo","stroke","val","Controller","renderer","leftDragging","rightDragging","handleWheel","ev","zoom","deltaY","handleMouseDown","button","handleMouseUp","handleMouseLeave","handleMouseMove","translation","movementX","movementY","degree","finalDegree","rotation","PI","handleContextMenu","preventDefault","can","addEventListener","removeEventListener","App","canvasRef","useRef","useState","window","innerWidth","innerHeight","canvasSize","setCanvasSize","_","debounce","useEffect","current","addTile","random","controller","register","running","render","requestAnimationFrame","unregister","className","styles","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","module","exports"],"mappings":"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","file":"static/js/main.bec62b40.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n  width: number\n  height: number\n  ref: React.Ref<HTMLCanvasElement>\n}\n\nconst GridCanvas: React.FC<Props> = React.forwardRef((props: Props, ref: React.Ref<HTMLCanvasElement>) => {\n  return (\n    <canvas width={props.width} height={props.height} ref={ref} />\n  )\n})\n\nexport default GridCanvas\n","import Tile from \"./Tile\";\n\nexport default class Scene {\n\n  private tiles: { [key: string]: Tile }\n\n  constructor() {\n    this.tiles = { }\n  }\n\n  getTiles() {\n    return this.tiles\n  }\n\n  addTile(tile: Tile) {\n    const key = `${tile.position.x}_${tile.position.y}_${tile.position.z}`\n    this.tiles[key] = tile\n  }\n}","import { Vec3 } from \"./types\";\n\nexport default class Tile {\n\n  position: Vec3\n  color: string\n\n  constructor(pos: Vec3, color: string) {\n    this.position = pos\n    this.color = color\n  }\n}","import { Vec2, Rect } from \"./types\"\nimport Scene from \"./Scene\"\nimport Tile from \"./Tile\"\n\nexport default class Renderer {\n\n  ctx: CanvasRenderingContext2D\n  scene: Scene\n  showGrid: boolean\n  \n  private _zoom: number\n  private _translation: Vec2\n  private _rotation: number\n  private _pixelRatio: number\n  private _totalTranslation: Vec2\n  private _tileSize: number\n  \n  constructor(canvas: HTMLCanvasElement, scene: Scene, pixelRatio: number) {\n    const context = canvas.getContext('2d')\n    if (!context) {\n      throw new Error('can not aquire canvas context.')\n    }\n    this.ctx = context\n    this.scene = scene\n    this.showGrid = true\n\n    this._zoom = 1\n    this._translation = {\n      x: 0, \n      y: 0\n    }\n    this._rotation = 0\n    this._pixelRatio = pixelRatio\n    this._totalTranslation = {\n      x: this.ctx.canvas.width / 2 + this._translation.x,\n      y: this.ctx.canvas.height / 2 + this._translation.y\n    }\n    this._tileSize = this._zoom * this._pixelRatio\n  }\n\n  get zoom(): number {\n    return this._zoom\n  }\n  set zoom(val: number) {\n    this._zoom = val\n    this._tileSize = this._zoom * this._pixelRatio\n  }\n\n  get translation(): Vec2 {\n    return this._translation\n  }\n  set translation(val: Vec2) {\n    this._translation = val\n    this._totalTranslation = {\n      x: this.ctx.canvas.width / 2 + this._translation.x,\n      y: this.ctx.canvas.height / 2 + this._translation.y\n    }\n  }\n\n  get rotation(): number {\n    return this._rotation\n  }\n  set rotation(val: number) {\n    this._rotation = val\n  }\n\n  get pixelRatio(): number {\n    return this._pixelRatio\n  }\n  set pixelRatio(val: number) {\n    this._pixelRatio = val\n    this._tileSize = this._zoom * this._pixelRatio\n  }\n\n  render() {\n    this.clear()\n    \n    // translate and rotate the canvas\n    this.ctx.translate(this._totalTranslation.x, this._totalTranslation.y)\n    this.ctx.rotate(this._rotation)\n    \n     // render grid\n    this.showGrid && this.renderGrid()\n\n    // render scene\n    Object.values(this.scene.getTiles()).forEach(tile => {\n      this.ctx.fillStyle = tile.color\n      const rect = this.getTileRenderRect(tile)\n      this.ctx.fillRect(rect.x, rect.y, rect.w, rect.h)\n    })\n  }\n\n  private clear() {\n    this.ctx.setTransform(1, 0, 0, 1, 0, 0)\n    this.ctx.fillStyle = '#eeeeee'\n    this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height)\n  }\n\n  private getTileRenderRect(tile: Tile): Rect {\n    const x = tile.position.x * this._tileSize\n    const y = -(tile.position.y + 1) * this._tileSize\n    return {\n      x,\n      y,\n      w: this._tileSize,\n      h: this._tileSize\n    }\n  }\n\n  private renderGrid() {\n    const halfDiagonal = Math.sqrt(Math.pow(this.ctx.canvas.width, 2) + Math.pow(this.ctx.canvas.height, 2)) / 2\n    let startX = this.ctx.canvas.width / 2 - halfDiagonal - halfDiagonal % this._tileSize\n    let endX = -startX + this.ctx.canvas.width\n    let startY = this.ctx.canvas.height / 2 - halfDiagonal - halfDiagonal % this._tileSize\n    let endY = -startY + this.ctx.canvas.height\n    startX -= this._totalTranslation.x - this._translation.x % this._tileSize\n    endX -= this._totalTranslation.x - this._translation.x % this._tileSize\n    startY -= this._totalTranslation.y - this._translation.y % this._tileSize\n    endY -= this._totalTranslation.y - this._translation.y % this._tileSize\n    const ctx = this.ctx\n    ctx.strokeStyle = '#111111'\n    let y = (startY + endY) / 2\n    strokeLine(startX, y, endX, y)\n    for (let i = 1; y + i * this._tileSize < endY; i++) {\n      const yDown = y + i * this._tileSize\n      const yUp = y - i * this._tileSize\n      strokeLine(startX, yDown, endX, yDown)\n      strokeLine(startX, yUp, endX, yUp)\n    }\n    let x = (startX + endX) / 2\n    strokeLine(x, startY, x, endY)\n    for (let i = 1; x + i * this._tileSize < endX; i++) {\n      const xRight = x + i * this._tileSize\n      const xLeft = x - i * this._tileSize\n      strokeLine(xRight, startY, xRight, endY)\n      strokeLine(xLeft, startY, xLeft, endY)\n    }\n    function strokeLine(x1: number, y1: number, x2: number, y2: number) {\n      ctx.beginPath()\n      ctx.moveTo(x1, y1)\n      ctx.lineTo(x2, y2)\n      ctx.stroke()\n    }\n  }\n}","import Renderer from \"./Renderer\";\n\nexport default class Controller {\n\n  renderer: Renderer\n\n  private leftDragging: boolean\n  private rightDragging: boolean\n\n  constructor(renderer: Renderer) {\n    this.renderer = renderer\n    this.leftDragging = false\n    this.rightDragging = false\n  }\n\n  register() {\n    const can = this.renderer.ctx.canvas\n    // zooming\n    can.addEventListener('wheel', this.handleWheel)\n    // panning\n    can.addEventListener('mousedown', this.handleMouseDown)\n    can.addEventListener('mouseup', this.handleMouseUp)\n    can.addEventListener('mouseleave', this.handleMouseLeave)\n    can.addEventListener('mousemove', this.handleMouseMove)\n    // prevent default context menu when rotating\n    can.addEventListener('contextmenu', this.handleContextMenu)\n  }\n\n  unregister() {\n    const can = this.renderer.ctx.canvas\n    // zooming\n    can.removeEventListener('wheel', this.handleWheel)\n    // panning and rotation\n    can.removeEventListener('mousedown', this.handleMouseDown)\n    can.removeEventListener('mouseup', this.handleMouseUp)\n    can.removeEventListener('mouseleave', this.handleMouseLeave)\n    can.removeEventListener('mousemove', this.handleMouseMove)\n    // prevent default context menu when rotating\n    can.removeEventListener('contextmenu', this.handleContextMenu)\n  }\n\n  private handleWheel = (ev: WheelEvent) => {\n    this.renderer.zoom += ev.deltaY > 0 ? -0.1 : 0.1\n    this.renderer.zoom = this.renderer.zoom < 0.1 ? 0.1 : this.renderer.zoom\n  }\n\n  private handleMouseDown = (ev: MouseEvent) => {\n    if (ev.button === 0) {\n      this.leftDragging = true\n    } else if (ev.button === 2) {\n      this.rightDragging = true\n    }\n  }\n\n  private handleMouseUp = (ev: MouseEvent) => {\n    if (ev.button === 0) {\n      this.leftDragging = false\n    } else if (ev.button === 2) {\n      this.rightDragging = false\n    }\n  }\n\n  private handleMouseLeave = () => {\n    this.leftDragging = false\n    this.rightDragging = false\n  }\n\n  private handleMouseMove = (ev: MouseEvent) => {\n    if (this.leftDragging) {\n      this.renderer.translation = {\n        x: this.renderer.translation.x + ev.movementX,\n        y: this.renderer.translation.y + ev.movementY\n      }\n    } else if (this.rightDragging) {\n      const degree = -ev.movementX / this.renderer.ctx.canvas.width * 180\n      const currentDegree = this.renderer.rotation / Math.PI * 180\n      const finalDegree = (currentDegree + degree) % 360\n      this.renderer.rotation = finalDegree / 180 * Math.PI\n    }\n  }\n\n  private handleContextMenu = (ev: MouseEvent) => {\n    ev.preventDefault()\n  }\n}","import React, { useState, useRef, useEffect } from 'react';\nimport _ from 'lodash'\nimport GridCanvas from './components/GridCanvas'\nimport styles from './assets/styles/App.module.scss';\nimport Scene from './assets/engine/Scene';\nimport Tile from './assets/engine/Tile';\nimport Renderer from './assets/engine/Renderer';\nimport Controller from './assets/engine/Controller';\n\nconst App: React.FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const [canvasSize, setCanvasSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  })\n\n  window.addEventListener('resize', _.debounce(() => {\n    setCanvasSize({\n      width: window.innerWidth,\n      height: window.innerHeight\n    })\n  }, 100))\n\n  useEffect(() => {\n    if (!canvasRef.current) return\n\n    const scene = new Scene()\n    for (let i = -5; i < 5; i++) {\n      scene.addTile(new Tile({\n        x: i,\n        y: 0,\n        z: 0\n      }, `rgb(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255})`))\n    }\n    const renderer = new Renderer(canvasRef.current, scene, 50)\n    const controller = new Controller(renderer)\n    controller.register()\n    let running = true\n    \n    function render() {\n      if (!running) return\n      renderer.render()\n      requestAnimationFrame(render)\n    }\n\n    render()\n\n    return () => {\n      running = false\n      controller.unregister()\n    }\n\n  }, [])\n\n  // useEffect(() => {\n  //   if (!canvasRef.current) return\n  //   const can = canvasRef.current\n  //   const ctx = can.getContext('2d')\n  //   let gridSize = 50\n  //   let x = 0\n  //   let y = 0\n  //   let dragging = false\n  //   let keyMaps: { [key: string]: number } = { }\n  \n  //   can.addEventListener('wheel', function(ev) {\n  //     gridSize += ev.deltaY > 0 ? -2 : 2\n  //     gridSize = gridSize < 4 ? 4 : gridSize\n  //   })\n  //   can.addEventListener('mousedown', function() {\n  //     dragging = true\n  //   })\n  //   can.addEventListener('mouseup', function() {\n  //     dragging = false\n  //   })\n  //   can.addEventListener('mouseleave', function() {\n  //     dragging = false\n  //   })\n  //   can.addEventListener('mousemove', function(ev) {\n  //     if (dragging) {\n  //       x += ev.movementX\n  //       y += ev.movementY\n  //     }\n  //   })\n  //   document.addEventListener('keydown', function(ev) {\n  //     keyMaps[ev.key] = 1\n  //   })\n  //   document.addEventListener('keyup', function(ev) {\n  //     delete keyMaps[ev.key]\n  //   })\n  \n  //   let rendering = true\n\n  //   function render() {\n  //     if (!ctx || !rendering) return\n      \n  //     if (keyMaps['a']) {\n  //       x -= 2\n  //     }\n  //     if (keyMaps['d']) {\n  //       x += 2\n  //     }\n  //     if (keyMaps['w']) {\n  //       y -= 2\n  //     }\n  //     if (keyMaps['s']) {\n  //       y += 2\n  //     }\n  \n  //     ctx.clearRect(0, 0, can.width, can.height)\n  //     ctx.fillStyle = '#000000'\n  //     ctx.fillRect(0, 0, can.width, can.height)\n  \n  //     ctx.strokeStyle = '#fff'\n  //     for (let i = 0; i < can.width / gridSize + 2; i++) {\n  //       ctx.beginPath()\n  //       ctx.moveTo(i * gridSize + x % gridSize - gridSize, -gridSize)\n  //       ctx.lineTo(i * gridSize + x % gridSize - gridSize, can.height + gridSize)\n  //       ctx.stroke()\n  //     }\n  //     for (let j = 0; j < can.height / gridSize + 2; j++) {\n  //       ctx.beginPath()\n  //       ctx.moveTo(-gridSize, j * gridSize + y % gridSize - gridSize)\n  //       ctx.lineTo(can.width + gridSize, j * gridSize + y % gridSize - gridSize)\n  //       ctx.stroke()\n  //     }\n  \n  //     ctx.fillStyle = 'red'\n  //     ctx.fillRect(125 + x, 125 + y, 50, 50)\n  \n  //     const id = requestAnimationFrame(render)\n  //   }\n    \n  //   render()\n\n  //   return () => {\n  //     rendering = false\n  //   }\n  // }, [])\n\n  return (\n    <div className={styles['App']}>\n      <GridCanvas width={canvasSize.width} height={canvasSize.height} ref={canvasRef} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__23ZhI\"};"],"sourceRoot":""}